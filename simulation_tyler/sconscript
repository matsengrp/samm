# Test model fits against one another - data generated from a survival model

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

from data_paths import SCRATCH_DIR

Import('env')
localenv = env.Clone()
# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

FILE_DICT = {
    "naive_light": "../data/naive_light.fasta",
}
MODEL_DICT = {
    # Run load_logistic_model.py first
    "logistic": "simulation_tyler/data/logistic_model.pkl",
}
NUM_SIMULATE = 10

nest.add(
    'model',
    ["logistic"],
)

nest.add(
    'seq',
    ["naive_light"],
)

nest.add(
    'censor_time',
    [60],
    label_func=lambda c: "mutate_%d" % c,
)

@nest.add_target_with_env(localenv)
def simulate(env, outdir, c):
    cmd = ['python simulate_shm_star_tree.py',
           '--seed 0',
           '--agg-motif-len 5',
           '--input-model',
           MODEL_DICT[c['model']],
           '--germline-seq-fasta',
           FILE_DICT[c['seq']],
           '--n-subjects',
           1,
           '--tot-mutated',
           NUM_SIMULATE,
           '--min-percent-mutated 0',
           '--max-percent-mutated 0.1',
           '--censor-time',
           c['censor_time'],
           '--output-mutated ${TARGETS[0]}',
           '--output-naive ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def count_codons(env, outdir, c):
    cmd = ['python count_codons.py',
           '--input-mutated ${SOURCES[0]}',
           '--input-naive ${SOURCES[1]}',
           '--output-codon ${TARGETS[0]}',
    ]
    return env.Command(
        [join(outdir, 'codons.csv')],
        c['simulate'],
        ' '.join(map(str, cmd)))
