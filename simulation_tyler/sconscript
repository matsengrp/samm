# Test model fits against one another - data generated from a survival model

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

from data_paths import SCRATCH_DIR

Import('env')
localenv = env.Clone()
# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

MODEL_DICT = {
    # Run load_logistic_model.py first
    "logistic": "simulation_tyler/data/logistic_model.pkl",
}
NUM_SIMULATE = 100000

nest.add(
    'model',
    ["logistic"],
)

nest.add(
    'seq',
    [
        "naive_light",
        "naive_heavy",
        "mature_light",
        "mature_heavy",
    ],
)

nest.add(
    'censor_time',
    [60],
    label_func=lambda c: "censor_%d" % c,
)

nest.add_aggregate(
    'agg_germline', list)
nest.add_aggregate(
    'agg_mutate', list)

nest.add(
    'seed',
    range(1))

@nest.add_target_with_env(localenv)
def simulate(env, outdir, c):
    cmd = [
           'srun',
           'python simulate_shm_star_tree.py',
           '--seed',
           c['seed'],
           '--agg-motif-len 5',
           '--input-model',
           MODEL_DICT[c['model']],
           '--germline-seq-fasta',
           join("../data/", "%s.fasta" % c['seq']),
           '--n-subjects',
           1,
           '--tot-mutated',
           NUM_SIMULATE,
           '--min-percent-mutated 0',
           '--max-percent-mutated 0.1',
           '--censor-time',
           c['censor_time'],
           '--output-mutated ${TARGETS[0]}',
           '--output-naive ${TARGETS[1]}']
    targets = [join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')]
    c["agg_mutate"].append(targets[0])
    c["agg_germline"].append(targets[1])
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.pop('seed')

@nest.add_target_with_env(localenv)
def count_codons(env, outdir, c):
    input_template = join(
        "simulation_tyler",
        c["agg_mutate"][0].replace("/0/", "/*/"))
    cmd = ['python count_codons.py',
           '--input-mutated',
           '"%s"' % input_template,
           '--input-naive ${SOURCES[0]}',
           '--output-codon ${TARGETS[0]}',
    ]
    return env.Command(
        [join(outdir, 'codons.csv')],
        [c["agg_germline"], c["agg_mutate"]],
        ' '.join(map(str, cmd)))
