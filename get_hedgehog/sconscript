# Figure 5 and 6 in the paper (the final data application)
import os
import pickle
import csv
import numpy as np

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
from random import randint
from data_paths import CUI_DATA_PATH, SCRATCH_DIR

Import('env')
localenv = env.Clone()

# Set up state
base = {'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

LOCUS = 'igk' # only kappa chain is relevant for Cui data

nest.add(
    'replicate',
    range(1),
    label_func='{:02d}'.format)

# Nest for processing all data
#@nest.add_target_with_env(localenv)
#def process_all_data(env, outdir, c):
#    cmd = ['python preprocess_data.py',
#               '--seed',
#               c['replicate'],
#               '--path-to-annotations',
#               CUI_DATA_PATH,
#               '--metadata-path',
#               CUI_DATA_PATH + '/meta.csv',
#               '--group',
#               'immunized',
#               '--locus',
#               LOCUS,
#               '--species',
#               'mouse',
#               '--region',
#               'v',
#               '--germline-family',
#               'v',
#               '--filter-indels',
#               '--scratch-directory',
#               SCRATCH_DIR,
#               '--output-genes ${TARGETS[0]}',
#               '--output-seqs ${TARGETS[1]}']
#
#    return env.Command(
#        [
#            join(outdir, 'processed_genes_all_data.csv'), join(outdir, 'processed_seqs_all_data.csv'),
#        ],
#        [],
#        ' '.join(map(str, cmd)))

# Nest for processing data - sample one per clonal family
@nest.add_target_with_env(localenv)
def process_data(env, outdir, c):
    cmd = ['python preprocess_data.py',
               '--seed',
               c['replicate'],
               '--path-to-annotations',
               CUI_DATA_PATH,
               '--metadata-path',
               CUI_DATA_PATH + '/meta.csv',
               '--group',
               'immunized',
               '--locus',
               LOCUS,
               '--species',
               'mouse',
               '--region',
               'v',
               '--germline-family',
               'v',
               '--filter-indels',
               '--sample-from-family',
               '--scratch-directory',
               SCRATCH_DIR,
               '--output-genes ${TARGETS[0]}',
               '--output-seqs ${TARGETS[1]}']

    return env.Command(
        [
            join(outdir, 'processed_genes.csv'), join(outdir, 'processed_seqs.csv'),
        ],
        [],
        ' '.join(map(str, cmd)))

motif_params_dict = [
    {
        'motif_length': '3,5',
        'left_motif_flanks': '1:2',
        'penalty_params': ",".join(map(str, np.power(10, np.arange(-1.5, -5.0, step=-.5)).tolist())),
    }
]

nest.add(
    'motif_params',
    motif_params_dict,
    label_func=lambda c: 'motif-' + c['motif_length'].replace(',','-') +
        '-flank-' + c['left_motif_flanks'].replace(',', '-').replace(':', '--'))

nest.add(
    'per_target',
    [
         True,
    ]
)

@nest.add_target_with_env(localenv)
def fit_logistic(env, outdir, c):
    motif_lens = c['motif_params']['motif_length']
    left_flanks = c['motif_params']['left_motif_flanks']
    per_target_flag = "--per-target-model" if c["per_target"] else ""
    penalty_params = ",".join(map(str, np.power(10, np.arange(0.5, -1.5, step=-.5)).tolist()))

    cmd = ['python fit_logistic_model.py',
           '--seed',
           c['replicate'],
           '--input-mutated',
           '${SOURCES[0]}',
           '--input-naive',
           '${SOURCES[1]}',
           '--motif-lens',
           motif_lens,
           '--positions-mutating',
           left_flanks,
           '--penalty-params',
           penalty_params,
           per_target_flag,
           '--k-folds',
           5,
           '--tuning 0',
           '--model-pkl ${TARGETS[0]}',
           '--log-file ${TARGETS[1]}',
           '--validation-col germline_family']

    return env.Command(
        [join(outdir, 'logistic_model.pkl'), join(outdir, 'logistic_log.txt')],
        c['process_data'],
        ' '.join(map(str, cmd)))


## fit survival
#@nest.add_target_with_env(localenv)
#def fit_survival(env, outdir, c):
#    cmd = []
#    motif_len = c['motif_params']['motif_length']
#    left_flanks = c['motif_params']['left_motif_flanks']
#    penalty_params = c['motif_params']['penalty_params']
#
#    cmd = ['python fit_samm.py',
#           '--seed',
#           c['replicate'],
#           '--input-naive ${SOURCES[0]}',
#           '--input-mutated ${SOURCES[1]}',
#           '--motif-lens',
#           motif_len,
#           '--positions-mutating',
#           left_flanks,
#           '--penalty-params',
#           penalty_params,
#           '--num-cpu-threads',
#           10,
#           '--num-jobs',
#           10,
#           '--burn-in',
#           16,
#           '--num-e-samples',
#           4,
#           '--sampling-rate',
#           8,
#           '--em-max-iters',
#           10,
#           '--num-val-burnin',
#           16,
#           '--num-val-samples',
#           16,
#           '--scratch-directory',
#           SCRATCH_DIR,
#           '--out-file ${TARGETS[0]}',
#           '--log-file ${TARGETS[1]}',
#           '--k-folds',
#           5,
#           '--tuning 0',
#           '--validation-col germline_family',
#           ]
#    if c["per_target"]:
#        cmd += ['--per-target-model']
#    return env.Command(
#        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
#        c['process_data'],
#        ' '.join(map(str, cmd)))
#
#@nest.add_target_with_env(localenv)
#def plot_hedgehog(env, outdir, c):
#    motif_len = c['motif_params']['motif_length']
#    left_flanks = c['motif_params']['left_motif_flanks']
#
#    cmd = ['python plot_samm.py',
#           '--input-pkl',
#           '${SOURCES[0]}',
#           '--output-csv',
#           '${TARGETS[0]}',
#           '--output-pdf',
#           '${TARGETS[1]}']
#
#    return env.Command(
#        [join(outdir, 'fitted.csv'), join(outdir, 'fitted.pdf')],
#        c['fit_survival'],
#        ' '.join(map(str, cmd)))
#
#@nest.add_target_with_env(localenv)
#def fit_shazam(env, outdir, c):
#
#    cmd = ['python fit_shmulate_model.py',
#           '--input-file',
#           '${SOURCES[1]}',
#           '--input-genes',
#           '${SOURCES[0]}',
#           '--model-pkl ${TARGETS[0]}',
#           '--log-file ${TARGETS[1]}']
#
#    return env.Command(
#        [join(outdir, 'fitted_shazam.pkl'), join(outdir, 'log_shazam.txt'), join(outdir, 'fitted_shazam_mut.csv')],
#        c['process_all_data'],
#        ' '.join(map(str, cmd)))
#
#@nest.add_target_with_env(localenv)
#def plot_hedgehog_shazam(env, outdir, c):
#    motif_len = c['motif_params']['motif_length']
#    left_flanks = c['motif_params']['left_motif_flanks']
#
#    cmd = ['python plot_shazam.py',
#           '--mut',
#           '${SOURCES[2]}',
#           '--output-csv',
#           '${TARGETS[0]}',
#           '--output-pdf',
#           '${TARGETS[1]}',
#           '--center-nucs C']
#
#    return env.Command(
#        [join(outdir, 'fitted_shazam_C_only.csv'), join(outdir, 'fitted_shazam_C_only.pdf')],
#        c['fit_shazam'],
#        ' '.join(map(str, cmd)))
#
#@nest.add_target_with_env(localenv)
#def plot_hedgehog_sammcomp(env, outdir, c):
#    motif_len = c['motif_params']['motif_length']
#    left_flanks = c['motif_params']['left_motif_flanks']
#
#    cmd = ['python plot_samm.py',
#           '--input-pkl',
#           '${SOURCES[0]}',
#           '--output-csv',
#           '${TARGETS[0]}',
#           '--output-pdf',
#           '${TARGETS[1]}',
#           '--center-nucs C',
#           '--no-conf-int']
#
#    return env.Command(
#        [join(outdir, 'fitted_samm_C_only.csv'), join(outdir, 'fitted_samm_C_only.pdf')],
#        c['fit_survival'],
#        ' '.join(map(str, cmd)))
#
#@nest.add_target_with_env(localenv)
#def plot_hedgehog_logistic(env, outdir, c):
#    motif_len = c['motif_params']['motif_length']
#    left_flanks = c['motif_params']['left_motif_flanks']
#
#    cmd = ['python plot_shazam.py',
#           '--logistic-pkl',
#           '${SOURCES[0]}',
#           '--output-csv',
#           '${TARGETS[0]}',
#           '--output-pdf',
#           '${TARGETS[1]}',
#           '--center-nucs C']
#
#    return env.Command(
#        [join(outdir, 'fitted_logistic_C_only.csv'), join(outdir, 'fitted_logistic_C_only.pdf')],
#        c['fit_logistic'],
#        ' '.join(map(str, cmd)))
